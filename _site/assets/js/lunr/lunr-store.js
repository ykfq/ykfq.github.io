var store = [{
        "title": "使用 secret 和 configmap 将二进制文件挂载到容器内",
        "excerpt":"背景 我们一个项目的开发人员提出一个需：其中一个微服务需要使用ssl方式连接外部的kafka服务，实现双向认证。因此需要本地配置客户端证书，在发起连接时加载。 这个证书文件，如何放到容器内？ 开发人员希望我们直接将文件添加到容器内，并指定一个固定路径。 技术上可以这么做，但有一个问题: 开发/测试/生产 不同环境的 ssl 证书必定不一样，这样就会导致不同环境要构建不同的 Docker 镜像，这不符合我们的预期。我们希望同一个Docker镜像，可以适用于所有环境。 因此，我们需要换一种方式来实现。 我们发现 Kubernetes 的 secret 和 configmap 可以做个事。 但 configmap 要 Kubernetes 1.10 开始才支持。 如何使用 secret       修改 Helm chart 的 Template 目录下的 secret.yaml 文件，增加 kafka jks 的配置：       apiVersion: v1kind: Secrettype: kubernetes.io/dockercfgmetadata:  name: {{ .Release.Name }}-imagepullsecret  namespace: {{ .Values.namespace }}data:  .dockercfg: {{ include \"dockerCfgString\" . }}  kafka.client.keystore.jks: {{ .Values.secret.data.keystore }}  kafka.client.truststore.jks: {{ .Values.secret.data.truststore }}              修改 chart 内的 values.yaml 文件，设置 keystore 和 truststore 的 data 和 volume 挂载点     keystore 和 truststore 默认值为一个错误的值，避免环境互通的情况下，加载到了默认的正确值，链接到其它地方去了；     同时，这里我们优化了 volumes 和 volumeMounts, 实现了多种不同类型的 volume 的挂载。     volumeMounts:- name: kafka-keystore  mountPath: /home/c3user/keystore  readOnly: true  volumes:- name: kafka-keystore  secret:    secretName: tima-cons-ford-imagepullsecret    items:    - key: kafka.client.keystore.jks      path: kafka.client.keystore.jks    - key: kafka.client.truststore.jks      path: kafka.client.truststore.jkssecret:  data:    keystore: \"base64 value of file kafka.client.keystore.jks\"    truststore: \"base64 value of file kafka.client.truststore.jks\"        生成 kafka jks 文件的 base64 编码    # -w 0 // 指定输出编码不换行cat kafka.client.keystore.jks | base64.exe -w 0cat kafka.client.truststore.jks | base64.exe -w 0            在 charts-deploy 的 appvars 下 的任意 app YAML文件内，新增与上面相同的字段，但 value 值填写正确的 kafka jks 文件的 base64 编码, 这样在渲染模版时，就会覆盖 values.yaml 中的值：       secret:    data:      keystore: \"xxxxxxxxxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyyyyyyy\"      truststore: \"yyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxx\"            在 _helper.tpl 模版文件内定义一段可以重用的代码，使用 toYaml 来直接转换 values.yaml 的内容为 YAML 格式     由于代码块中含有 jekyll 会主动解析的关键字： {{ }} , 我们需要使用逃逸字符来避免 Jekyll 渲染它们。     用法参考这里： Escaping double curly braces inside a markdown code block in Jekyll       {{- define \"volume.mounts\" }}{{ toYaml .Values.volumeMounts | trim }}{{- end }}  {{- define \"volume.sources\" }}{{ toYaml .Values.volumes | trim }}{{- end }}              在 Deployment 中添加 volumeMounts 和 volumes 定义     使用优化后的模版渲染方式：在 values.yaml 中分开定义，并在 Deployment.yaml 中分开引用。         volumeMounts:  {{- include \"volume.mounts\" . |indent 8 }}volumes:{{- include \"volume.sources\" . | indent 6 }}imagePullSecrets:- name: {{ .Release.Name }}-imagepullsecret              本地渲染     如果我们没有确定 helm 渲染出来的文件格式是否正常，就使用 helm install 直接安装，一旦有错就得重来，显然不方便于调试。因此我们可以在这之前使用 helm template 命令在本地渲染并输出 yaml 格式的文件进行修正。详细参考这里： https://docs.helm.sh/helm/#helm_template     helm template mychart -x templates/deployment.yaml  # 或cd mycharthelm template ./  -x templates/deployment.yaml        最后，如果没有问题，我们就可以给 Chart 打上新的 tag ，提交到 ChartMuseum 了。         提交成 chart     编写好 Chart 之后，如果 charts-deploy（存储 appvars） 也检查无误，我们就可以将它提交到 git 仓库了。 我们的 Pipeline 会自动构建、上传并安装 Chart。         验证一下     下面是我们在 Kubernetes-Dashboard 和 具体的 应用内部看到的情况。     Secret：     pod 内 mount情况：     如何使用 Configmap     后续补充。   ","categories": [],
        "tags": ["secret","configMap","binary"],
        "url": "http://192.168.100.100:4000/kubernetes/mount-binary-files-into-pods-using-secret-and-configmap",
        "teaser":null},{
        "title": "如何从 OpenStack 中彻底删除僵尸实例",
        "excerpt":"1、正常删除实例（ocata）   https://docs.openstack.org/user-guide/cli-delete-an-instance.html       1.1 List all instances:     openstack server list        1.2 Run the openstack server delete command to delete the instance. The following example shows deletion of the  newServer instance, which is in  ERROR state:    openstack server delete newServer        1.3 To verify that the server was deleted, run the openstack server list command:    openstack server list            1.4 清理之前”临时关闭外键检查”的遗留问题           http://blog.csdn.net/spch2008/article/details/7952369               删除 security_group_instance_association 中关联数据:        delete from security_group_instance_association where instance_id=xxxxx;                我这里没有相关实例，略过。             删除 instance_info_caches 中关联数据        # 先看下表中有哪些字段，长什么样子：select * from instance_info_caches \\G;    # 筛选出有用的信息：select instance_uuid,deleted,network_info from instance_info_caches where network_info=\"[]\";    # 确认network_info 为空的实例已经被删除了，这里一并删除之：delete from instance_info_caches where network_info=\"[]\";    # 删除因在web界面删除失败，而我在instances表中直接删除的实例：          delete from instance_info_caches where network_info like \"%172.20.69.%\";delete from instance_info_caches where network_info like \"%172.20.70.%\";    #删除instance镜像文件uuids2=\"  0a2d1bf7-982c-4034-9713-566d58ced0c4  ddeb6e86-713e-44b0-b27c-88ae1cdece3f  596aa6ca-7abe-46ea-b375-9808164b6073  1ed0a4dd-ddfe-4be0-97af-9e0c20ccdaae  b3a82ba7-2046-45da-9744-ed935a185edf\"for id in $uuids2;do rm -rf /var/lib/nova/**instances**/$id;done                    2、删除僵尸实例   http://6728496.blog.51cto.com/6718496/1178393 前天强制重启一台 OpenStack Nova 控制节点以后发现虚拟机消失，但是 nova-list 命令显示 instances 仍然是 running 的状态，使用 nova-delete 终止命令仍然无效，暂时把这样的 instance 称作 “僵尸实例（zombie instance）”： virsh listId Name         State----------------------------------euca-describe-instances#RESERVATION    r-bkl83j20    bangcloud    default#INSTANCE    i-0000001d    ami-00000002    172.16.39.121    172.16.39.121    running    vpsee (vpseecloud, node00)    0            2011-11-10T12:45:12Z    nova    aki-00000001    ami-00000000#RESERVATION    r-j335q6ny    bangcloud    default#INSTANCE    i-0000001e    ami-00000002    172.16.39.122    172.16.39.122    running    vpsee (vpseecloud, node00)    0            2011-11-10T12:54:27Z    nova    aki-00000001    ami-00000000euca-terminate-instances i-0000001deuca-terminate-instances i-0000001e#和 删除 OpenStack Nova Volume 时遇到的 error_deleting 问题 这篇文章提到的解决办法一样，直接操作数据库来删除这2条僵尸实例的记录。登录 mysql，使用 nova 数据库，找出要删除 instance 的 id，然后删除：mysql -u root -p#Enter password:mysql&gt; use nova;mysql&gt; select * from instances;mysql&gt; delete from instances where id = '29';#ERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`nova`.`virtual_interfaces`, CONSTRAINT `virtual_interfaces_ibfk_1` FOREIGN KEY (`instance_id`) REFERENCES `instances` (`id`))#MySQL 删除 id 为 29 的 instance 时触发外键限制错误，简单的办法是暂时关闭外键检查，等删除后再打开：mysql&gt; SET FOREIGN_KEY_CHECKS=0;#Query OK, 0 rows affected (0.00 sec)mysql&gt; delete from instances where id = '29';#Query OK, 1 row affected (0.04 sec)mysql&gt; delete from instances where id = '30';#Query OK, 1 row affected (0.04 sec)mysql&gt; SET FOREIGN_KEY_CHECKS=1;#Query OK, 0 rows affected (0.00 sec)# 删除 instance 29 和 30后再用 euca-describe-instances 命令验证一下：euca-describe-instances删除host为 NULL 的实例 select uuid,id,host,hostname from instances;发现有很多实例的host是NULL，这些是之前测试的时候创建的，后来被删除了，但是数据库还保留着信息，我想把它删掉：  select uuid,id,host,hostname from instances where host='';select uuid,id,host,hostname from instances where host=\"NULL\";  咦，什么都没删掉？噢 ，想起来了，NULL是bool值，只能用 is 或 is not来匹配： MariaDB [nova]&gt; delete from instances where host is NULL;#ERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`nova`.`block_device_mapping`, CONSTRAINT `block_device_mapping_instance_uuid_fkey` FOREIGN KEY (`instance_uuid`) REFERENCES `instances` (`uuid`))MariaDB [nova]&gt; SET FOREIGN_KEY_CHECKS=0;#Query OK, 0 rows affected (0.00 sec)MariaDB [nova]&gt; delete from instances where host is NULL;#Query OK, 83 rows affected (0.02 sec)MariaDB [nova]&gt; SET FOREIGN_KEY_CHECKS=1;#Query OK, 0 rows affected (0.00 sec)MariaDB [nova]&gt; select uuid,id,host,hostname from instances; 正常了。 ","categories": [],
        "tags": ["openstack","zombie","mysql"],
        "url": "http://192.168.100.100:4000/openstack/delete-zombie-instances-completly",
        "teaser":null},{
        "title": "制作 OpenStack 的 CentOS6.x 镜像",
        "excerpt":"简介 创建 OpenStack 实例时，我们多数时间是使用 镜像+实例类型 来创建的。那么，制作一个通用的镜像就很重要了。 当用户创建一个实例时，会选择相应的镜像（如centos6.8 或者centos7.3 ），再选择相应的实例类型，如t2.micro、t2.large, 实际他们对应的可能是2C/2G/20G或4C/4G/40G的硬件配置。 因此，对于我们需要使用的镜像，至少要求提供如下功能：   1、合适的操作系统；  2、自动扩容硬件配置；  3、控制台输出日志；  4、带有常用工具；下面就是CentOS6.8 的镜像制作过程。主流镜像制作请参考官网: create-images-manually 基础环境准备 在控制节点上执行 #安装libvirt相关工具yum groupinstall Virtualization \"Virtualization Client\"yum -y install libvirt#启动服务systemctl enable libvirtd; systemctl start libvirtd; systemctl status libvirtd#下载或从本地上传系统镜像mkdir /openstack-imagecd /openstack-imagewget http://mirrors.timacloud.cn/centos/6.8/images/CentOS-6.8-x86_64-minimal.iso制作镜像 #创建`qcow2`格式的镜像文件chown -R qemu:qemu /openstack-imageqemu-img create -f qcow2 /openstack-image/centos6.8-prod.qcow2 10G#通过virt-install创建虚拟机virt-install --virt-type kvm --name centos-6.8-mini \\  --ram 2048 --disk ./centos6.8-prod.qcow2,format=qcow2 \\  --network network=default --graphics vnc,listen=0.0.0.0 \\  --noautoconsole --os-type=linux --os-variant=rhel6 \\  --location=./CentOS-6.8-x86_64-minimal.iso安装操作系统 安装操作系统，需要通过vnc工具链接到虚拟机终端，在终端内操作。 #查看镜像vnc监听的端口netstat -ntlp | grep qemu-kvm查找到虚拟机的vnc端口为5900，使用tigerVNC进行连接，并在控制台完成系统安装。ip就是服务器的ip，端口默认第一个为5900以此类推，也可以通过命令：virsh vncdisplay vmname查询端口，推荐使用tigervnc来打开。  以这个方式安装操作系统和正常的安装几乎一样,但是有两点需要注意的:       网络: 确保你的网卡eth0是DHCP状态的，而且请务必勾上auto connect的对勾。         分区: 分区的时候选择默认的Use all available space，分区成lvm格式，其他不要设置。   系统安装完毕之后,我们刚才使用的vnc-install命令会自动退出。 配置虚拟机 在控制节点上使用命令启动虚拟机。 #查看所有的虚拟机virsh list --all#启动虚拟机virsh start centos6.8 #使用tcpump来抓包发现IP地址tcpdump -i any 'udp port 67 or port 68'#远程登录主机ssh 192.168.122.11#修改虚拟机网络配置cat &gt; /etc/sysconfig/network-scripts/ifcfg-eth0 &lt;&lt; EOFNAME=eth0DEVICE=eth0TYPE=EthernetONBOOT=yesNM_CONTROLLED=noBOOTPROTO=dhcpIPV6INIT=noPEERDNS=noEOF#虚拟机常用设置#设置bashcat &gt;&gt; ~/.bashrc &lt;&lt; EOFHISTTIMEFORMAT=\"%F %T \"alias ls='ls --color=auto --time-style +\"%T %F\"'alias ll='ls -lrth'alias vi='vim'EOF#设置公共dnscat &gt; /etc/resolv.conf &lt;&lt; EOFnameserver 223.5.5.5nameserver 114.114.114.114EOF#设置时钟同步mkdir -pv /var/log/ntpdatecat &gt;&gt; /etc/crontab &lt;&lt; EOF#每天晚上2:00 定时同步时钟00 02 * * * root (/usr/sbin/ntpdate ntp1.aliyum.com) &gt;&gt; /var/log/ntpdate/ntpdate_\\$(date +\\%Y\\%m) 2&gt;&amp;1EOF#设置vimcat &gt;&gt; ~/.vimrc &lt;&lt; EOFcolorscheme elflord\"highlight searchset hlsearch\"ignorecaseset ignorecase\"Smart Case, work with ignorecaseset smartcase\"Increase search, dynamic searchset incsearch\"Tab size=4 spaceset ts=4EOF# 设置Selinux为permissivesed -i '/SELINUX/ s/enforcing/permissive/g' /etc/selinux/config#设置ssh连接时禁止dns查询sed -i 's/^#UseDNS yes/UseDNS no/' /etc/ssh/sshd_configsed -i '/PasswordAuthentication s/no/yes/g' /etc/ssh/sshd_config#设置yumrm -f /etc/yum.repos.d/* &amp;&amp; \\curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo &amp;&amp; \\curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo#安装常用工具yum -y install bash-completion bash-completion-extras net-tools telnet \\               mlocate tcpdump gzip unzip bind-utils htop iftop iotop vim \\               rsync lsof wget tree ntpdate#手动同步一次时钟ntpdate ntp1.aliyum.com#删除mac设备配置文件echo \"#\" &gt; /etc/udev/rules.d/75-persistent-net-generator.rules#或者删除已生成的配置文件，重启后会重新生成rm -f /etc/udev/rules.d/70-persistent-net.rules#增加如下配置已避免连接实例时出现metadata服务问题cat &gt;&gt; /etc/sysconfig/network &lt;&lt; EOFNOZERCONF=yesEOF#关闭防火墙service iptables stop &amp;&amp; chkconfig iptables offservice ip6tables stop &amp;&amp; chkconfig ip6tables off#安装ACPI服务，能让宿主机对虚拟机进行开关机等电源管理操作yum -y install acpidchkconfig acpid on#安装cloud-init, 使得虚拟机能够自动获取密钥设置主机名等yum install -y cloud-utils-growpart cloud-init cloud-utils parted #修改cloud_init配置文件,增加dns配置引用，在 cloud_init_modules 下面增加:vim /etc/cloud/cloud.cfgcloud_init_modules - resolv-conf#去除cloud-init默认阻止root远程登录并且禁止password认证vim /etc/cloud/cloud.cfgusers：– defaults   disable_root：0  # default 1   ssh_pwauth：  1  # default 0#安装linux rootfs resize, 使得实例启动时可以自动扩展根分区yum -y install gitgit clone https://github.com/flegmatik/linux-rootfs-resize.gitcd linux-rootfs-resize./installcd ../ &amp;&amp; rm -rf linux-rootfs-resize#开启nova console log日志输出支持，centos6和 centos7有差异#centos6vim /etc/grub.confconsole=tty0 console=ttyS0,115200n8 #追加到kernel行末尾#注：/etc/grub.conf /boot/grub/menu.lst 都是指向 /boot/grub/grub.conf 的软链。#centos7vim /etc/default/grub删除rhgb quiet 并追加 console=tty0 console=ttyS0,115200n8#重新生成grub.cfg文件grub2-mkconfig -o /boot/grub2/grub.cfg#清除yum缓存，然后关机yum clean allpoweroff清理和压缩镜像 在宿主机上操作 #清除网络相关硬件生成信息sudo yum install /usr/bin/virt-sysprepvirt-sysprep -d centos-6.8-mini#压缩镜像virt-sparsify --compress ./centos.qcow2 CentOS-6.8-mini-Cloud.qcow2添加镜像到glance openstack image create \"CentOS-6.8-mini-Cloud\" \\  --file ./CentOS-6.8-mini-Cloud.qcow2 \\  --disk-format qcow2 \\  --container-format bare --public 从virsh删除image模版 确保你制作的镜像已经可用。并且意味着你下次需要重新创建并安装系统。 virsh list --allvirsh undefine centos6.8","categories": [],
        "tags": [],
        "url": "http://192.168.100.100:4000/openstack/create-centos6-image-for-openstack",
        "teaser":null},{
        "title": "在 CentOS7 上使用 rvm 安装 ruby 并配置 Jeykll 使用 minimal-mistakes 主题",
        "excerpt":"本次的主要目的是使用minimal-mistakes这个Jekyll主题来构建一个博客，引发一系列劳神费力的事情。 安装rvm 参考这个帖子： https://tecadmin.net/install-ruby-latest-stable-centos/       设置yum源     由于国内网络问题，需要事先设置好yum的base和epel源，我使用了中国科技大学的yum源，配置不赘述。     可以参考这里：CentOS 7.x 系统初始化配置     由于已经指定了yum镜像，我禁用了yum的fastestmirror插件：     vi /etc/yum/pluginconf.d/fastestmirror.conf  [main]enabled=0        安装依赖    yum -y install gcc-c++ patch readline readline-devel zlib zlib-devel \\ libyaml-devel libffi-devel openssl-devel make \\ bzip2 autoconf automake libtool bison iconv-devel sqlite-devel        安装rvm使用curl安装，下载很慢，先设置代理：    export http_proxy=\"http:st.xxxx.me:44443\"export https_proxy=\"http:st.xxxx.me:44443\"  curl -sSL https://rvm.io/mpapis.asc | gpg --import -curl -L get.rvm.io | bash -s stablesource /etc/profile.d/rvm.shrvm reload  rvm requirements run      安装ruby 我们使用rvm安装ruby，同理需要设置rvm使用国内的镜像源，我这里替换成了淘宝的源： sed -i -E 's!https?://cache.ruby-lang.org/pub/ruby!https://ruby.taobao.org/mirrors/ruby!' $rvm_path/config/db由于Jekyll依赖ffi这个模块，它支持Ruby &amp; RubyGems的最新版本是 ffi 1.9.18, 并且支持Ruby的版本要求 &lt; 2.5, &gt;= 2.0，因此我选择安装ruby 2.4: rvm install 2.4#安装完成检查已安装的版本rvm list#设置默认rubyrvm use 2.4 --defaultruby --version安装Jekyll       设置gem mirrors     由于安装过程中gem会下载一堆依赖，我们还需要设置gem的镜像地址，这里还是选择了淘宝的镜像：           全局设置        gem sources -lgem sources --remove https://rubygems.orggem sources -a https://ruby.taobao.org                    当前项目        bundle config mirror.https://rubygems.org https://ruby.taobao.org                或者修改项目目录下的Gemfile文件：         vim Gemfile    #source 'https://rubygems.org/'source 'https://ruby.taobao.org/'                          安装Jekyll     gem install bundler jekylljekyll new xxxx.mecd my-awesome-site      使用minimal-mistakes主题 文档：   https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide/   vim Gemfile    gem \"minimal-mistakes-jekyll\"        vim _config.yml    theme: minimal-mistakes-jekyll        安装minimal-mistakes-jekyll的依赖    bundle install        启动服务    bundle exec jekyll serve --host 192.168.100.100 -w            访问服务           http://192.168.100.100:4000       美化定制       修改页面宽度     vim ./_sass/minimal-mistakes/_variables.scss     /*   Breakpoints   ========================================================================== */$small: 600px !default;$medium: 768px !default;$medium-wide: 1024px !default;$large: 1200px !default;$x-large: 1366px !default;  /*   Grid   ========================================================================== */$right-sidebar-width-narrow: 220px !default;$right-sidebar-width: 260px !default;$right-sidebar-width-wide: 300px !default;            修改页面字体大小     vim ./_sass/minimal-mistakes/_reset.scss     html {  /* apply a natural box layout model to all elements */  box-sizing: border-box;  background-color: $background-color;  font-size: 16px;    @include breakpoint($medium) {    font-size: 15px;  }    @include breakpoint($large) {    font-size: 16px;  }    @include breakpoint($x-large) {    font-size: 18px;  }    -webkit-text-size-adjust: 100%;  -ms-text-size-adjust: 100%;}            给 home 页面文章列表添加更新日期     参考: https://github.com/dvhart/dvhart.github.io/blob/master/_includes/archive-single.html     vim _includes/archive-single.html       # 删除第 33-35 行，并在第32行后面插入如下部分  &lt;!-- dvhart: date read-time meta line --&gt;  &lt;p class=\"page__meta\"&gt;    {% if post.last_modified_at %}      &lt;i class=\"fa fa-fw fa-calendar\" aria-hidden=\"true\"&gt;&lt;/i&gt; &lt;time datetime=\"{{ post.last_modified_at | date: \"%Y-%m-%d\" }}\"&gt;{{ post.last_modified_at | date: \"%B %d, %Y\" }}&lt;/time&gt;&amp;emsp;    {% elsif post.date %}      &lt;i class=\"fa fa-fw fa-calendar\" aria-hidden=\"true\"&gt;&lt;/i&gt; &lt;time datetime=\"{{ post.date | date_to_xmlschema }}\"&gt;{{ post.date | date: \"%B %d, %Y \" }}&lt;/time&gt;&amp;emsp;    {% endif %}    {% if post.read_time %}&lt;i class=\"fa fa-clock-o\" aria-hidden=\"true\"&gt;&lt;/i&gt;&amp;nbsp;{% include read-time.html %}{% endif %}  &lt;/p&gt;  &lt;!-- end dvhart date read-time meta line --&gt;              布局设置     https://mmistakes.github.io/minimal-mistakes/docs/layouts/#headershttps://github.com/mmistakes/minimal-mistakes/issues/892https://github.com/mmistakes/minimal-mistakes/issues/1303 ","categories": [],
        "tags": ["centos 7.x","rvm","ruby","jekyll","minimal-mistakes"],
        "url": "http://192.168.100.100:4000/systems/install-jekyll-minimal-mistakes-using-ruby-managed-by-rvm",
        "teaser":null},{
        "title": "如何在 CentOS 7.x 上安装 MySQL 5.7",
        "excerpt":"1. 安装mysql5.7 CentOS6.x 使用中国科技大学镜像源：https://mirrors.ustc.edu.cn/mysql-ftp/Downloads/ version=5.7.22-1  curl -SLO https://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.7/mysql-community-libs-${version}.el6.x86_64.rpmcurl -SLO https://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.7/mysql-community-devel-${version}.el6.x86_64.rpmcurl -SLO https://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.7/mysql-community-common-${version}.el6.x86_64.rpmcurl -SLO https://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.7/mysql-community-server-${version}.el6.x86_64.rpmcurl -SLO https://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.7/mysql-community-client-${version}.el6.x86_64.rpmyum -y remove mariadb*yum -y install numactlyum -y localinstall mysql-community-*.rpmsed -i '/mysqld/a\\user=mysql' /etc/my.cnfchkconfig mysqld onservice mysqld start grep \"temporary password\" /var/log/mysqld.logmysql_secure_installationmysql -uroot -pCentOS7.x 使用中国科技大学镜像源：https://mirrors.ustc.edu.cn/mysql-ftp/Downloads/ version=5.7.22-1  curl -SLO https://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.7/mysql-community-libs-${version}.el7.x86_64.rpmcurl -SLO https://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.7/mysql-community-devel-${version}.el7.x86_64.rpmcurl -SLO https://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.7/mysql-community-common-${version}.el7.x86_64.rpmcurl -SLO https://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.7/mysql-community-server-${version}.el7.x86_64.rpmcurl -SLO https://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.7/mysql-community-client-${version}.el7.x86_64.rpmyum -y remove mariadb*yum -y install numactlyum -y localinstall mysql-community-*.rpmsed -i '/\\[mysqld\\]/a\\performance_schema = ON' /etc/my.cnfsed -i '/\\[mysqld\\]/a\\user=mysql' /etc/my.cnfsed -i '/mysql.sock/a\\character_set_server = utf8' /etc/my.cnfsystemctl enable mysqld; systemctl start mysqld#修改密码强度策略(一定要在上面那步初始化启动完成之后再修改)sed -i '/mysql.sock/a\\validate_password_policy = 0' /etc/my.cnfsystemctl restart mysqldgrep \"temporary password\" /var/log/mysqld.log | awk -F\"localhost: \" '{print $2}'mysql_secure_installationmysql -uroot -p2、安装mysql5.5 Remine 只支持mysql5.0-5.5，mysql&gt;=5.6 有问题，详见官方说明https://www.redmine.org/projects/redmine/wiki/RedmineInstall/ 使用中国科技大学镜像源：https://mirrors.ustc.edu.cn/mysql-ftp/Downloads  wget https://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.5/MySQL-5.5.55-1.el6.x86_64.rpm-bundle.tar tar xf MySQL* rpm -ivh MySQL*.rpm chkconfig mysqld on service mysqld start mysql_secure_installation3. 报错问题 1、无法连接到服务器：Table ‘performance_schema.session_variables’ doesn’t exist #先在配置文件开启performance_schema[mysqld]performance_schema=ON#再登录mysql更新库表：mysql_upgrade -u root -p --forcehttps://stackoverflow.com/questions/36746677/table-performance-schema-session-variables-doesnt-existhttps://dev.mysql.com/doc/refman/5.7/en/performance-schema-quick-start.html 2、Fatal error: mysql.user table is damaged. Please run mysql_upgrade 执行时 mysql_upgrade -u root -p --force 却提示因mysqld没有启动而无法连接到mysql，岂不是进入了死局？ 还好stackoverflow 找到了答案:先跳过授权启动mysqld：mysqld --skip-grant-tables 如果依然提示 mysql_upgrade: Got error: 2002: Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' 需要修改配置文件，指定mysql的进程位置： [client]socket=/data/mysql/mysql.sock然后新开一个克隆窗口，执行 mysql_upgrade -u root -p 完成后就可以了正常启动mysqld 了，最后pkill mysqld ，使用正常方式启动： service mysqld start   https://stackoverflow.com/questions/36156475/mysqld-doesnt-start-after-brew-upgrade-from-5-6-to-5-7https://serverfault.com/questions/527422/mysql-upgrade-is-failing-with-no-real-reason-given 3、1 of ORDER BY clause is not in GROUP BY clause and contains nonaggregated column ==’information_schema.PROFILING.SEQ’ which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by== vim /etc/my.cnf sql_mode=\"\"4、忘记root密码 使用非root用户启动mysqld在配置文件中添加 [mysqld]user=mysqlupdate mysql.user set authentication_string=password('123456') where user='root' and Host ='localhost';  http://blog.csdn.net/xinliuqianxue/article/details/52156568 5、You must reset your password using ALTER USER statement before executing this statement. SET PASSWORD = PASSWORD('xxxxxx#345');ALTER USER root@'localhost' PASSWORD EXPIRE NEVER;flush privileges;6、[ERROR] Fatal error: Please read “Security” section of the manual to find out how to run mysqld as root! 在my.cnf文件中，指定user=mysql; 7、ERROE –initialize specified but the data directory has files in it 每次重启都会提示，数据已经存在了，但是我的进程并没有启动，而且手动删除了 /var/lib/mysql 下的数据，这是为什么呢？ systemctl status mysqld.service 显示服务启动失败，并且有上面的提示； tail -f /var/log/mysqld.log 发现不断在刷日志； ps -ef | grep mysql 竟然有进程存在，见鬼了。 [root@izm5eg3yspb12eu8z0ocfsz ~]# ps -ef | grep mysqlmysql    15669     1  0 11:50 ?        00:00:00 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pidmysql    15672     1  0 11:50 ?        00:00:00 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pidroot     15687  1260  0 11:50 pts/1    00:00:00 grep --color=auto mysql参考文档   http://www.tecmint.com/install-latest-mysql-on-rhel-centos-and-fedora/https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-centos-7 ","categories": [],
        "tags": ["secret","configMap","binary"],
        "url": "http://192.168.100.100:4000/databases/how-to-install-mysql57-on-centos7x",
        "teaser":null},{
        "title": "CentOS 7.x 系统初始化配置",
        "excerpt":"This is an system init installation of centos 7 for template use. 1. Personalization cat &gt;&gt; /root/.bashrc &lt;&lt; EOFHISTTIMEFORMAT=\"%F %T \"alias ls='ls --color=auto --time-style +\"%T %F\"'alias ll='ls -lh'alias vi='vim'function mkcd{  mkdir -p -- \"\\$@\" &amp;&amp; cd \"\\$@\"}EOF2. Set DNS sed -i '/^PEERDNS/d' /etc/sysconfig/network-scripts/ifcfg-eth0sed -e '/^ONBOOT/a\\PEERDNS=no' -i /etc/sysconfig/network-scripts/ifcfg-eth0cat /dev/null &gt; /etc/resolv.confcat &gt;&gt; /etc/resolv.conf &lt;&lt; EOFnameserver 119.29.29.29nameserver 223.5.5.5EOF3. Set timezone/selinux/sshd echo \"Asia/shanghai\" &gt; /etc/timezone &amp;&amp; \\ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimesed -i '/SELINUX/ s/enforcing/permissive/g' /etc/selinux/configsed -i 's/^#UseDNS yes/UseDNS no/' /etc/ssh/sshd_configsed -i 's/^#PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config4. Change YUM repositories rm -f /etc/yum.repos.d/*curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.reposed -i '/aliyuncs/d' /etc/yum.repos.d/CentOS-Base.reposed -e 's!gpgkey=http://mirrors.aliyun.com/centos!gpgkey=file:///etc/pki/rpm-gpg!g' \\    -e 's!http!https!g' \\    -e 's!mirrors.aliyun.com!mirrors.ustc.edu.cn!g' \\    -i /etc/yum.repos.d/CentOS-Base.repoyum install -y epel-releasesed -e 's!^mirrorlist=!#mirrorlist=!g' \\    -e 's!^#baseurl=!baseurl=!g' \\    -e 's!//download\\.fedoraproject\\.org/pub!//mirrors.ustc.edu.cn!g' \\    -e 's!http://mirrors\\.ustc!https://mirrors.ustc!g' \\    -i /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel-testing.reposed -e 's!enabled=1!enabled=0!g' -i /etc/yum/pluginconf.d/fastestmirror.conf5. Install basic tools and set time server yum -y install bash-completion bash-completion-extras net-tools telnet \\               mlocate tcpdump gzip unzip bind-utils htop iftop iotop vim \\               rsync lsof wget tree chronysed -e 's!centos.pool.ntp.org!cn.pool.ntp.org!g' -i /etc/chrony.confsystemctl enable chronydsystemctl restart chronyd6. Turn off swap/firewalld if needed # If needed#swapoff /dev/mapper/centos-swap\"#sed -i '/swap/d' /etc/fstab\"systemctl stop firewalldsystemctl disable firewalld7. System tunning Coming soon… ","categories": [],
        "tags": ["centos 7.x","init"],
        "url": "http://192.168.100.100:4000/systems/centos7-system-init",
        "teaser":null},{
        "title": "如何在 CentOS 6.x 上安装 Java7 Tomcat7 MySQL5.5",
        "excerpt":"需求收集   系统环境: CentOS 6.8  硬件配置: 2C/4G/60G  应用版本:          Java1.7 最新版                  https://mirror.its.sfu.ca/mirror/CentOS-Third-Party/NSG/common/x86_64/jdk-7u80-linux-x64.rpm                     mysql5.5 最新版                  https://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.5/MySQL-devel-5.5.59-1.el6.x86_64.rpmhttps://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.5/MySQL-server-5.5.59-1.el6.x86_64.rpmhttps://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.5/MySQL-client-5.5.59-1.el6.x86_64.rpm                     Tomcat7.0 最新版                  https://mirrors.aliyun.com/apache/tomcat/tomcat-7/v7.0.85/bin/apache-tomcat-7.0.85.tar.gz                     以上需求不做硬性要求, 如果你了解其它版本的差异和兼容性并能够自行解决, 可以使用其它版本; 安装Java1.7 #rpm 包安装jdk_version=7u80rpm -ivh https://mirror.its.sfu.ca/mirror/CentOS-Third-Party/NSG/common/x86_64/jdk-${jdk_version}-linux-x64.rpm --prefix=/usr/local/java#添加JAVA环境变量cat &gt;&gt; /etc/profile &lt;&lt; EOFexport JAVA_HOME=/usr/local/java/jdk${jdk_version}export JRE_HOME=/usr/local/java/jdk${jdk_version}/jreexport PATH=\\$PATH:\\$JAVA_HOME/bin:\\$JRE_HOME/binEOFsource /etc/profilejava -version安装MySQL5.5 # 查找并卸载旧版mysqlrpm -qa |grep -i mysql | xargs yum -y remove# 安装依赖yum -y groupinstall \"Development tools\"yum -y install perl-DBI# 指定mysql版本并使用yum在线安装MYSQL_VERSION=5.5.61-1yum -y install https://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.5/MySQL-devel-${MYSQL_VERSION}.el6.x86_64.rpmyum -y install https://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.5/MySQL-server-${MYSQL_VERSION}.el6.x86_64.rpmyum -y install https://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.5/MySQL-client-${MYSQL_VERSION}.el6.x86_64.rpm# 复制配置文件和启动脚本cp /usr/share/mysql/my-medium.cnf /etc/my.cnfcp /usr/share/mysql/mysql.server /etc/init.d/mysqld# 添加优化参数sed -i '/\\[mysqld]/a\\character_set_server=utf8' /etc/my.cnfsed -i '/\\[mysqld]/a\\user=mysql' /etc/my.cnf# 启动服务并设置初始化密码/etc/init.d/mysqld restart/usr/bin/mysqladmin -u root -h localhost.localdomain password 'tE&amp;%a5BBVzsPBfmN7JZt'# 登录数据库mysql -hlocalhost.localdomain -uroot -p\"tE&amp;%a5BBVzsPBfmN7JZt\"安装Tomcat   安装Tomcat7.0    TOMCAT_VERSION=7.0.81wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-7/v${TOMCAT_VERSION}/bin/apache-tomcat-${TOMCAT_VERSION}.tar.gztar xf apache-tomcat-${TOMCAT_VERSION}.tar.gzmv apache-tomcat-${TOMCAT_VERSION} /opt &amp;&amp; cd /opt &amp;&amp; ln -sf apache-tomcat-${TOMCAT_VERSION} tomcat        安装JDBC    MYSQL_CONNECTOR_VERION=5.1.46wget https://cdn.mysql.com//Downloads/Connector-J/mysql-connector-java-${MYSQL_CONNECTOR_VERION}.tar.gztar xf mysql-connector-java-${MYSQL_CONNECTOR_VERION}.tar.gzcp mysql-connector-java-${MYSQL_CONNECTOR_VERION}/mysql-connector-java-${MYSQL_CONNECTOR_VERION}-bin.jar ${JAVA_HOME}/ln -sf ${JAVA_HOME}/mysql-connector-java-${MYSQL_CONNECTOR_VERION}-bin.jar ${JAVA_HOME}/mysql-connector-java.jar      ","categories": [],
        "tags": ["java","mysql","tomcat","centos 6.x"],
        "url": "http://192.168.100.100:4000/systems/install-java7-tomcat7-mysql55-on-centos6",
        "teaser":null},{
        "title": "在 OpenStack Ocata/Queens 上一键完成实例疏散",
        "excerpt":"概念梳理 先明确几个概念。 什么是实例疏散？ 如果硬件故障或其他错误导致OpenStack计算节点启动失败,我们就可以使用实例疏散让在其它可用节点重启这些实例，恢复它们的服务。 随着历史的推演，openstack 的文档和命令中有些概念趋于模糊和混淆，我们常常弄不清，比如 instance 和 server，host 和 node，migration 和 evacuate ，它们有什么区别的呢？ ServerFault 上有人提了问，然后有大神做了详细的解释，引用一下，同时无比感激。   https://serverfault.com/a/761882/368226  做个简要整理：       在 OpenStack 中，server指的是 instance (实例)，host 指的是物理主机，如：     computer node、controller node、network node、storage node 等；         关于实例疏散和迁移，分两种情况：                   计算节点宕机无法恢复                   执行 nova evacuate 在其它主机启动一个新的实例          执行 nova host-evacuate 在其它主机启动全部实例                            计算节点正常运行                   执行 nova host-evacuate-live 尝试热疏散所有实例到其它主机          执行 nova host-servers-migrate 迁移所有停机的实例到其它主机          执行 nova live-migration 热迁移单个实例到其它主机          执行 nova migrate 迁移单个停机的实例到其它主机                    疏散单个实例 openstack 主机疏散的文档非常简单，它只写了疏散单个实例的功能   https://docs.openstack.org/nova/queens/admin/evacuate.html 但 nova 帮助文档提供了更详细的用法：  示例操作 # 列出故障计算节点的所有实例nova list --host computer01# 执行疏散实例，让 scheduller 自动调度到其它节点nova evacuate instance_id# 也可指定目标主机nova evacuate instance_id --target_host computer02疏散全部实例 实际上 nova 还有疏散整个故障主机上全部实例的功能，文档参考红帽的：   https://access.redhat.com/documentation/en-us/red_hat_openstack_platform/13/html/instances_and_images_guide/ch-manage_instances#section-move-all-instances nova 帮助文档也提供了稍微详细的用法：  示例操作 # 让 scheduller 自动调度nova host-evacuate computer01# 自己指定目标主机（如新增的集群节点）nova host-evacuate computer01 --target computer02手动疏散（更新数据库） 详细参考   https://docs.openstack.org/nova/queens/admin/node-down.html ","categories": [],
        "tags": ["openstack","ocata","queens","evacuate","migrate"],
        "url": "http://192.168.100.100:4000/openstack/evacuate-instances-on-openstack-ocata-and-queens",
        "teaser":null}]
